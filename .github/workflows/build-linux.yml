name: Build Linux
on:
  workflow_call:
    inputs:
      artifact-pattern:
        required: false
        type: string
        description: 'Pattern to search for artifact file'
        default: '${{ github.event.repository.name }}-*-devel.tar.xz'
      cmake-workflow-preset:
        required: false
        type: string
        description: 'CMake workflow preset to use; e.g. Linux, LinuxRelease, LinuxReleaseNoInstall'
        default: "Linux"
      runon:
        required: false
        type: string
        description: 'runs-on value (e.g., ubuntu-latest, ubuntu-24.04-arm, etc.)'
        default: "ubuntu-latest"
jobs:
  build-docker-image:
    runs-on: ${{ inputs.runon }}
    outputs:
      ghcrio_image_name: ${{ steps.image-names.outputs.ghcrio_image_name }}
      delete_image_name: ${{ steps.image-names.outputs.delete_image_name }}
    steps:
      -
        name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # fetches all history
          fetch-tags: true # explicitly fetches tags
          submodules: true
      -
        name: Configure git
        run: |
          touch ~/.gitconfig
          git config user.name ${{ github.actor }}
          git config user.email ${{ github.actor }}@users.noreply.github.com
      -
        name: Get docker and ghcr.io image names
        id: image-names
        run: |
          REPO_NAME=$(echo $(basename ${{ github.repository }}) | tr '[:upper:]' '[:lower:]')
          ORG_REPO_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')
          ARCH_NAME=$(echo '${{ runner.arch }}' | tr '[:upper:]' '[:lower:]')
          echo "docker_image_name=${REPO_NAME}-bld" >> $GITHUB_OUTPUT
          echo "ghcrio_image_name=ghcr.io/${ORG_REPO_NAME}/bldimg-${ARCH_NAME}" >> $GITHUB_OUTPUT
          echo "delete_image_name=${REPO_NAME}/bldimg-${ARCH_NAME}" >> $GITHUB_OUTPUT
      -
        name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build and push docker image
        run: |
          ./docker-compose.sh -b
          docker tag ${{ steps.image-names.outputs.docker_image_name }}:latest ${{ steps.image-names.outputs.ghcrio_image_name }}:latest
          docker push ${{ steps.image-names.outputs.ghcrio_image_name }}:latest
          docker images
  build:
    needs: build-docker-image
    if: ${{ needs.build-docker-image.result == 'success' }}
    runs-on: ${{ inputs.runon }}
    permissions:
      contents: read
      attestations: write
      id-token: write
    env:
      CMAKE_PRESET: Linux
    container:
      image: ${{ needs.build-docker-image.outputs.ghcrio_image_name }}:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      -
        name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # fetches all history
          fetch-tags: true # explicitly fetches tags
          submodules: true
      -
        name: CMake Configure
        run: cmake --preset=${{ env.CMAKE_PRESET }}
      -
        name: CMake Workflow
        run: cmake --workflow --preset=${{ inputs.cmake-workflow-preset }}
      -
        name: Upload CMake logs
        uses: actions/upload-artifact@v4
        with:
          name: cmake-logs-${{ env.CMAKE_PRESET }}-${{ runner.arch }}
          path: |
            _bld-${{ env.CMAKE_PRESET }}/CMakeFiles/CMakeConfigureLog.yaml
      -
        name: Find package
        id: find_package
        if: ${{ inputs.cmake-workflow-preset != 'LinuxReleaseNoInstall' }}
        shell: bash
        run: |
          file=$(pwd)/$(ls _bld-${{ env.CMAKE_PRESET }}/${{ inputs.artifact-pattern }})
          if [[ ! -f "$file" ]]; then
            echo "Package not found!" >&2
            exit 1
          fi
          echo "filepath=$file" >> $GITHUB_OUTPUT
          echo "filename=$(basename $file)" >> $GITHUB_OUTPUT
        working-directory: ${{ github.workspace }}
      -
        name: Upload package artifact
        id: upload_package
        if: ${{ inputs.cmake-workflow-preset != 'LinuxReleaseNoInstall' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.find_package.outputs.filename }}
          path: ${{ steps.find_package.outputs.filepath }}
      -
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ steps.find_package.outputs.filename }}
          subject-digest: sha256:${{ steps.upload_package.outputs.artifact-digest }}
  clean-up:
    needs: [build-docker-image, build]
    if: ${{ needs.build.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      -
        name: Delete untagged images from ghcr
        uses: snok/container-retention-policy@v3.0.0
        with:
          account: ${{ github.actor == github.repository_owner && 'user' || github.repository_owner }}
          token: ${{ secrets.GITHUB_TOKEN }}
          image-names: ${{ needs.build-docker-image.outputs.delete_image_name }}
          tag-selection: untagged
          cut-off: 1m
          dry-run: false
