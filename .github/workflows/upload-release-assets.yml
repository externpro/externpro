name: Upload Release Assets
on:
  workflow_call:
    inputs:
      workflow_run_url:
        description: 'URL of the workflow run to download artifacts from (e.g., https://github.com/owner/repo/actions/runs/123456789)'
        required: true
        type: string
      artifact_pattern:
        description: 'Pattern to match artifact files (e.g., "*.tar.xz")'
        required: false
        type: string
        default: '*.tar.xz'
      release_body_template:
        description: 'Template for the release body'
        required: false
        type: string
        default: |
          ## What's Changed

          This release includes build artifacts from workflow run:
          {workflow_run_url}

          ### Download
          - Download the appropriate `.tar.xz` file for your platform

          ### Verification
          SHA256 checksums are provided below for artifact verification.
      draft:
        description: 'Mark the release as a draft'
        required: false
        type: boolean
        default: false
    outputs:
      release_id:
        description: 'The ID of the release'
        value: ${{ jobs.upload-assets.outputs.release_id }}
      release_url:
        description: 'The URL of the release'
        value: ${{ jobs.upload-assets.outputs.release_url }}
      release_tag:
        description: 'The tag used for the release'
        value: ${{ jobs.upload-assets.outputs.release_tag }}
      is_prerelease:
        description: 'Whether the release is a prerelease'
        value: ${{ jobs.upload-assets.outputs.is_prerelease }}
jobs:
  upload-assets:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.release_id }}
      release_url: ${{ steps.create_release.outputs.release_url }}
      release_tag: ${{ steps.determine_tag.outputs.tag }}
      is_prerelease: ${{ steps.determine_tag.outputs.is_prerelease }}
    steps:
      -
        name: Checkout repository
        uses: actions/checkout@v4
      -
        name: Extract run ID from URL
        id: extract_run_id
        run: |
          run_url="${{ inputs.workflow_run_url }}"
          if [[ "$run_url" =~ /actions/runs/([0-9]+) ]]; then
            run_id="${BASH_REMATCH[1]}"
            echo "run_id=$run_id" >> $GITHUB_OUTPUT
            echo "Extracted run ID: $run_id"
          else
            echo "Error: Invalid workflow run URL format. Expected: https://github.com/owner/repo/actions/runs/123456789"
            exit 1
          fi
      -
        name: Download artifacts from workflow run
        run: |
          echo "Downloading artifacts from run ID: ${{ steps.extract_run_id.outputs.run_id }}"
          gh run download ${{ steps.extract_run_id.outputs.run_id }} --dir ./artifacts
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Find and prepare artifacts for upload
        id: find_artifacts
        run: |
          echo "Finding artifacts matching pattern: ${{ inputs.artifact_pattern }}"
          artifacts=()
          hashes=()
          # Find all files matching the pattern
          while IFS= read -r -d '' file; do
            if [[ -f "$file" ]]; then
              echo "Found artifact: $file"
              artifacts+=("$file")
              # Calculate SHA256 hash
              hash=$(sha256sum "$file" | cut -d' ' -f1)
              filename=$(basename "$file")
              hashes+=("$hash  $filename")
              echo "SHA256 ($filename): $hash"
            fi
          done < <(find ./artifacts -name "${{ inputs.artifact_pattern }}" -type f -print0)
          if [ ${#artifacts[@]} -eq 0 ]; then
            echo "No artifacts found matching pattern: ${{ inputs.artifact_pattern }}"
            exit 1
          fi
          # Convert arrays to JSON for output
          printf -v artifacts_json '%s\n' "${artifacts[@]}" | jq -R . | jq -s .
          printf -v hashes_json '%s\n' "${hashes[@]}" | jq -R . | jq -s .
          echo "artifacts=$artifacts_json" >> $GITHUB_OUTPUT
          echo "hashes=$hashes_json" >> $GITHUB_OUTPUT
          # Create hash summary for release notes
          hash_summary=""
          for hash_line in "${hashes[@]}"; do
            hash_summary="${hash_summary}${hash_line}"$'\n'
          done
          # Use EOF delimiter to handle multiline output
          {
            echo "hash_summary<<EOF"
            echo "$hash_summary"
            echo "EOF"
          } >> $GITHUB_OUTPUT
      -
        name: Determine tag from artifacts
        id: determine_tag
        run: |
          # Debug: Show all outputs from previous step
          echo "=== Debug: find_artifacts outputs ==="
          echo "Output names: $(compgen -A variable | grep steps_find_artifacts_outputs)"
          echo "Artifacts output: ${{ steps.find_artifacts.outputs.artifacts }}"
          echo "Hashes output: ${{ steps.find_artifacts.outputs.hashes }}"
          echo "Hash summary: ${{ steps.find_artifacts.outputs.hash_summary }}"
          
          # Try to parse artifacts if they exist
          if [ -n "${{ steps.find_artifacts.outputs.artifacts }}" ]; then
            echo "Artifacts output is not empty, trying to parse..."
            artifacts_json='${{ steps.find_artifacts.outputs.artifacts }}'
            echo "Raw artifacts JSON: $artifacts_json"
            
            # Try to extract first artifact using jq
            if command -v jq >/dev/null 2>&1; then
              echo "jq is available, trying to parse JSON..."
              first_artifact=$(echo "$artifacts_json" | jq -r '.[0]' 2>/dev/null || echo "jq_parse_failed")
              echo "First artifact (jq): $first_artifact"
            else
              echo "jq not available, trying basic string extraction..."
              # Fallback to basic string extraction if jq fails
              first_artifact=$(echo "$artifacts_json" | grep -o '"[^"]*"' | head -1 | tr -d '"')
              echo "First artifact (fallback): $first_artifact"
            fi
          else
            echo "Artifacts output is empty or not set"
            # Try to find artifacts directly in the workspace
            echo "Searching for artifacts in workspace..."
            find . -name "*.tar.xz" -type f | while read -r file; do
              echo "Found file: $file"
              first_artifact="$file"
              break
            done
          fi

          if [ -n "$first_artifact" ] && [ -f "$first_artifact" ]; then
            filename=$(basename "$first_artifact")
            echo "Determining tag from filename: $filename"
            
            # Extract version pattern from filename
            if [[ "$filename" =~ -([vV][0-9]+\.[0-9]+(\.[0-9]+)?(\.[0-9]+)?(-[0-9]+-g[a-f0-9]+)?)\.tar\.xz$ ]]; then
              version_tag="${BASH_REMATCH[1]}"
              echo "Extracted version tag: $version_tag"
              
              # Determine if this is a prerelease (has -#-g<hash> suffix)
              if [[ "$version_tag" =~ -[0-9]+-g[a-f0-9]+$ ]]; then
                echo "is_prerelease=true" >> $GITHUB_OUTPUT
                echo "This is a prerelease version"
              else
                echo "is_prerelease=false" >> $GITHUB_OUTPUT
                echo "This is a release version"
              fi
              echo "tag=$version_tag" >> $GITHUB_OUTPUT
            else
              echo "Error: Could not determine version tag from filename: $filename"
              echo "Expected pattern: *-v#.#[.#[.#]][-#-g<hash>].tar.xz"
              exit 1
            fi
          else
            echo "Error: No artifacts found or could not determine filename"
            echo "Available files in workspace:"
            find . -type f | sort
            exit 1
          fi
      -
        name: Check if tag exists
        id: check_tag
        run: |
          tag="${{ steps.determine_tag.outputs.tag }}"
          echo "Checking if tag exists: $tag"
          if gh release view "$tag" &>/dev/null; then
            echo "Error: Release for tag $tag already exists. This workflow is configured to fail if the release already exists."
            exit 1
          else
            echo "Release does not exist for tag: $tag"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Check if git tag exists
        id: check_git_tag
        run: |
          tag="${{ steps.determine_tag.outputs.tag }}"
          echo "Checking if git tag exists: $tag"
          if git ls-remote --tags origin "refs/tags/$tag" | grep -q "$tag"; then
            echo "Git tag $tag exists in the repository."
            echo "make_draft=false" >> $GITHUB_OUTPUT
          else
            echo "Git tag $tag does not exist in the repository. Will create a draft release."
            echo "make_draft=true" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Create release
        id: create_release
        run: |
          tag="${{ steps.determine_tag.outputs.tag }}"
          is_prerelease="${{ steps.determine_tag.outputs.is_prerelease }}"
          release_name="$tag"

          # Replace placeholders in release body template
          release_body="${{ inputs.release_body_template }}"
          release_body="${release_body//{workflow_run_url}/${{ inputs.workflow_run_url }}}"

          # Append hash summary to release body
          release_body="${release_body}"$'\n\n'"${{ steps.find_artifacts.outputs.hash_summary }}"

          # Set flags based on release type
          flags=""
          if [ "$is_prerelease" = "true" ]; then
            flags="$flags --prerelease"
          fi

          # Set draft status based on tag existence or input
          if [ "${{ steps.check_git_tag.outputs.make_draft }}" = "true" ] || [ "${{ inputs.draft }}" = "true" ]; then
            flags="$flags --draft"
          fi

          # Create the release
          echo "Creating release for tag: $tag"
          release_info=$(gh release create "$tag" \
            --title "$release_name" \
            --notes "$release_body" \
            $flags \
            --json id,url)

          echo "release_id=$(echo "$release_info" | jq -r '.id')" >> $GITHUB_OUTPUT
          echo "release_url=$(echo "$release_info" | jq -r '.url')" >> $GITHUB_OUTPUT
          echo "Created release: $tag"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Upload artifacts to release
        run: |
          tag="${{ steps.determine_tag.outputs.tag }}"
          echo "Uploading artifacts to release: $tag"
          for artifact in $(echo '${{ steps.find_artifacts.outputs.artifacts }}' | jq -r '.[]'); do
            echo "Uploading artifact: $artifact"
            gh release upload "$tag" "$artifact" --clobber
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      -
        name: List release assets
        run: |
          tag="${{ steps.determine_tag.outputs.tag }}"
          echo "Release assets for $tag:"
          gh release view "$tag" --json assets | jq -r '.assets[] | "- \(.name) (\(.size) bytes)"'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
